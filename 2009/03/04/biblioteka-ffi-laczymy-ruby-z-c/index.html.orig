<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="pl" xml:lang="pl">
  <head>
    <title>Biblioteka FFI - łączymy Ruby z C - Radarek bloguje... o Ruby</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="verify-v1" content="XvR5kxyBmJGgUb1Tca8kJ+ii1Vde81UrpDJptt6JMeU=" />
    <link rel="shortcut icon" href="/files/favicon.png" type="image/png" />
    <meta name="keywords" content="c, extension, ffi, inline, rozszerzenie, ruby, ruby/dl, C, JRuby, Ruby, Techblog, , ruby, ruby on rails, rails, merb, jruby, yarv, rubinius, ironruby, maglev, programowanie, radarek, radosław bułat, radoslaw bulat, radoslaw, bulat, python, gamedev" />
    <meta name="description" content="Wszystko co wiem o programowaniu, przede wszystkim Ruby." />
    <meta name="robots" content="index,follow"/>

    <link rel="stylesheet" href="/files/style.css" type="text/css" />
    <!--[if lte IE 6]><link rel="stylesheet" href="/files/style-ie6.css" type="text/css" /><![endif]-->
    <!--[if IE 7]><link rel="stylesheet" type="text/css" href="/files/style-ie7.css" /><![endif]-->

    <!--<script type="text/javascript" src="/files/jquery.js"></script>-->
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
    <script type="text/javascript" src="/files/common.js"></script>
    <script type="text/javascript" src="/files/highlight.js"></script>
    <script type="text/javascript" src="/files/dynamic.js"></script>
    <script type="text/javascript" src="/files/jruby.js"></script>
		
    
    <script type="text/javascript">
      hljs.initHighlightingOnLoad('ruby');
    </script>
    
    <!--[if lt IE 7.]><script defer type="text/javascript" src="/files/pngfix.js"></script><![endif]-->

    <link rel="alternate" type="application/atom+xml" title="Radarek bloguje... o Ruby - wpisy" href="http://feeds.feedburner.com/radarek-blog" />
    <link rel="alternate" type="application/atom+xml" title="Radarek bloguje... o Ruby - nagłówki" href="http://feeds.feedburner.com/radarek-blog/headers" />
    <link rel="alternate" type="application/atom+xml" title="Radarek bloguje... o Ruby - miniblog" href="http://feeds.feedburner.com/radarek-blog/miniblog" />
  </head>

  <body>
    <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-837628-3']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
      })();
    </script>
  
    <div id="top">
      <a href="/" id="return-to-main">&nbsp;</a>
      <h3 id="sentence">
        <q>Any fool can make things bigger, more complex, and more violent. It takes a touch of genius and a lot of courage to move in the opposite direction.</q>
        Albert Einstein
      </h3>

      <div id="title-image">
        <div id="ruby-logo"></div>
        <h1>o Ruby</h1>
      </div><!-- title-image -->

      <div id="navigation-tabs">
        <ul id="tabs">
          <li class="active"><a href="/"><span>Wpisy</span></a></li>
          <li><a href="http://radarek.jogger.pl/2007/04/29/o-blogu/"><span>O blogu</span></a></li>
          <li><a href="http://radarek.jogger.pl/2007/05/01/kanaly-rss/"><span>RSS</span></a></li>
          <li><a href="http://radarek.jogger.pl/2007/05/01/kontakt/"><span>Kontakt</span></a></li>
        </ul><!-- tabs -->
      </div><!-- navigations-tabs -->
    </div><!-- top -->

    <div id="top-shadow"></div>

    <div id="content-wrapper">

      <div id="menu">       
        <div class="submenu">
          <form action="/szukaj/" method="post" id="search">
            <fieldset>
              <h3>Szukaj</h3>

              <input class="text" type="text" value="" name="search" /><input class="submit" type="submit" value="Szukaj" />
            </fieldset>
          </form>
        </div>

        <div class="submenu">
          <h3>Subskrypcje RSS</h3>
          <a href="http://feeds.feedburner.com/radarek-blog"><img src="http://feeds.feedburner.com/~fc/radarek-blog?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border: 0; vertical-align: middle; margin: 0;" alt="" /></a> (pełne wpisy)
          <br />
          <span style="position: relative; left: 2em;">+</span>
          <br />
          <a href="http://feeds.feedburner.com/radarek-blog/headers"><img src="http://feeds.feedburner.com/~fc/radarek-blog/headers?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border: 0; vertical-align: middle; margin: 0;" alt="" /></a> (nagłówki)
        </div>

        <div class="submenu">
          <object width="200" height="300" type="application/x-shockwave-flash" data="http://www.blip.pl/widget.swf">
            <param name="movie" value="http://www.blip.pl/widget.swf" />
            <param name="quality" value="high"/>
            <param name="wmode" value="transparent" />
            <param name="flashvars" value="blip_user=radarek&amp;color_scheme=dark&amp;corner_radius=0&amp;"/>
          </object>
        </div>


        <div class="submenu">
          <h3>Miniblog</h3>
          
          <div class="miniblog-post">
            <h4><a class="title" href="http://radarek.jogger.pl/2009/01/01/gist-odpicowane-pastie/">Gist - odpicowane pastie</a></h4>
            01 Sty 2009
            <div class="">
              <p>
  <a href="http://gist.github.com">Gist</a> istnieje już jakiś czas, dopiero teraz przyglądnąłem się mu bliżej. Początkowo wydawało mi się, że to kolejny klon <a href="http://pastie.org">pastie</a>, ale szybko okazało się, że to coś więcej.
</p>

<p>
  Coś więcej ponieważ Gist, prócz tego co potrafi Pastie (edycja pliku online, kolorowanie składni, prywatne pliki), dodaje to co potrafi najlepiej - obsługa repozytoriów <a href="http://git-scm.com/">Git</a>. Otóż każde nowe "pastie" powoduje założenie repozytorium gita, które następnie możemy pobrać (clone), a także wysyłać do niego zmiany (push). Oczywiście nie jesteśmy ograniczeni do 1 pliku, możemy mieć ich tyle ile chcemy. Na stronie pokazywana jest historia rewizji. Dbałość o szczegóły jest firmowym znakiem serwisu <a href="http://github.com">GitHub</a>. Żegnaj Pastie, niech żyje Gist!
</p>

              
            </div><!-- post-body -->
          </div>
          
          <div class="miniblog-post">
            <h4><a class="title" href="http://radarek.jogger.pl/2008/10/12/mp3-przeboje/">Mp3 Przeboje</a></h4>
            12 Paź 2008
            <div class="">
              <a href="http://mp3przeboje.pl">http://mp3przeboje.pl/</a> to serwis dzięki, któremu możesz odsłuchać aktualne najciekawsze utwory muzyczne prosto z przeglądarki. Po prosty wybierz interesującą Cię listę przebojów (aktualnie 22 listy z różnych stacji radiowych) i słuchaj. Programiście projektu <a href="http://md6.org/">oki</a>emu należą się słowa uznania za staranność wykonania (serwis w zasadzie dopiero wystartował i ciągle się rozwija).
              
            </div><!-- post-body -->
          </div>
          
        </div>

        <div class="submenu">
          <h3>Narzędzia</h3>

          <ul id="tools">
            <li><a href="javascript:irb_console.toggle();">JRuby irb console</a></li>
          </ul>
        </div>

        <div class="submenu">
          <h3>Kategorie</h3>

          <ul id="categories">
          
            <li id="blog"><a href="http://radarek.jogger.pl/kategoria/blog/">Blog (6)</a></li>
          
            <li id="c"><a href="http://radarek.jogger.pl/kategoria/c/">C (1)</a></li>
          
            <li id="gamedev"><a href="http://radarek.jogger.pl/kategoria/gamedev/">Gamedev (1)</a></li>
          
            <li id="git"><a href="http://radarek.jogger.pl/kategoria/git/">Git (2)</a></li>
          
            <li id="humor"><a href="http://radarek.jogger.pl/kategoria/humor/">Humor (3)</a></li>
          
            <li id="java"><a href="http://radarek.jogger.pl/kategoria/java/">Java (1)</a></li>
          
            <li id="jruby"><a href="http://radarek.jogger.pl/kategoria/jruby/">JRuby (2)</a></li>
          
            <li id="miniblog"><a href="http://radarek.jogger.pl/kategoria/miniblog/">Miniblog (8)</a></li>
          
            <li id="narzedzia"><a href="http://radarek.jogger.pl/kategoria/narzedzia/">Narzędzia (7)</a></li>
          
            <li id="programowanie"><a href="http://radarek.jogger.pl/kategoria/programowanie/">Programowanie (7)</a></li>
          
            <li id="python"><a href="http://radarek.jogger.pl/kategoria/python/">Python (4)</a></li>
          
            <li id="ruby"><a href="http://radarek.jogger.pl/kategoria/ruby/">Ruby (37)</a></li>
          
            <li id="ruby_merb"><a href="http://radarek.jogger.pl/kategoria/ruby/merb/">Merb (2)</a></li>
          
            <li id="ruby_ruby-on-rails"><a href="http://radarek.jogger.pl/kategoria/ruby/ruby-on-rails/">Ruby on Rails (6)</a></li>
          
            <li id="techblog"><a href="http://radarek.jogger.pl/kategoria/techblog/">Techblog (36)</a></li>
          
            <li id="tips-tricks"><a href="http://radarek.jogger.pl/kategoria/tips-tricks/">Tips &amp; tricks (9)</a></li>
          
            <li id="web"><a href="http://radarek.jogger.pl/kategoria/web/">Web (2)</a></li>
          
          </ul>
        </div>

        <div class="submenu">
          <h3>Tagi</h3>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/blog/">Blog</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/c/">C</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/gamedev/">Gamedev</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/git/">Git</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/humor/">Humor</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/java/">Java</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/jruby/">JRuby</a>
          
            <a class="catlvl1" href="http://radarek.jogger.pl/kategoria/miniblog/">Miniblog</a>
          
            <a class="catlvl1" href="http://radarek.jogger.pl/kategoria/narzedzia/">Narzędzia</a>
          
            <a class="catlvl1" href="http://radarek.jogger.pl/kategoria/programowanie/">Programowanie</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/python/">Python</a>
          
            <a class="catlvl3" href="http://radarek.jogger.pl/kategoria/ruby/">Ruby</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/ruby/merb/">Merb</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/ruby/ruby-on-rails/">Ruby on Rails</a>
          
            <a class="catlvl3" href="http://radarek.jogger.pl/kategoria/techblog/">Techblog</a>
          
            <a class="catlvl1" href="http://radarek.jogger.pl/kategoria/tips-tricks/">Tips &amp; tricks</a>
          
            <a class="catlvl0" href="http://radarek.jogger.pl/kategoria/web/">Web</a>
          
        </div>

        <div class="submenu">
          <h3>Linki</h3>
          <ul id="links">
            <li><a href="http://mp3przeboje.pl/">mp3 przeboje</a></li>
            <li><a href="http://linuxlinki.md6.org/">Linux linki</a></li>
          </ul>
        </div>

        <div class="submenu">
          <h3>Archiwum</h3>
          <ul id="archives">
            
              <li><a href="/startid/470765">21.02.09-19.04.10
 (5)</a></li>
            
              <li><a href="/startid/433510">08.12.08-12.02.09
 (5)</a></li>
            
              <li><a href="/startid/425293">21.11.08-06.12.08
 (5)</a></li>
            
              <li><a href="/startid/423490">27.05.08-20.11.08
 (5)</a></li>
            
              <li><a href="/startid/392066">12.03.08-21.04.08
 (5)</a></li>
            
              <li><a href="/startid/383421">25.11.07-01.03.08
 (5)</a></li>
            
              <li><a href="/startid/364188">12.10.07-20.11.07
 (5)</a></li>
            
              <li><a href="/startid/337815">29.05.07-20.07.07
 (5)</a></li>
            
              <li><a href="/startid/323920">05.05.07-28.05.07
 (5)</a></li>
            
          </ul>
        </div>

      </div><!-- menu -->

      <div id="content">
        <div class="translation-info" style="display: none;">
          <script type="text/javascript" src="http://www.gmodules.com/ig/ifr?url=http://www.google.com/ig/modules/translatemypage.xml&amp;up_source_language=pl&amp;w=160&amp;h=60&amp;title=&amp;border=&amp;output=js"></script>
          <h4>Looking for english version of this blog?</h4>
          <p>
          Hello Stranger! This page is written in polish language and it looks like your is different than that.
          Currently I cannot afford english version of this page. The easiest way to (at least try) read this page on another language is to use automatic Google Translator. Thanks for visit!
          </p>
          <div style="clear: left;"></div>
        </div>

        <div style="margin-bottom: 1em;">
          <script type="text/javascript" id="AdTaily_Widget" src="http://static.adtaily.pl/widget.js#foobarbaz"></script>
          <noscript><p><a href="http://www.adtaily.pl">Skuteczna reklama na blogach sprzedawana za pomocą AdTaily</a>(PLALLADTAILY0002)</p></noscript>
        </div>

        <div class="post">

          <div class="post-header">
            <div class="post-date">
              <small>2009</small>
              <span>04</span>
              <small>Mar</small>
            </div><!-- post-date -->
            <h2 class="post-title"><a class="title" href="http://radarek.jogger.pl/2009/03/04/biblioteka-ffi-laczymy-ruby-z-c/">Biblioteka FFI - łączymy Ruby z C</a></h2>
            
            <a href="http://radarek.jogger.pl/2009/03/04/biblioteka-ffi-laczymy-ruby-z-c/#comments">18 komentarzy</a>
            | Kategorie:
            
              <a class="strong" href="http://radarek.jogger.pl/kategoria/c/">C,</a>
            
              <a class="strong" href="http://radarek.jogger.pl/kategoria/jruby/">JRuby,</a>
            
              <a class="strong" href="http://radarek.jogger.pl/kategoria/ruby/">Ruby,</a>
            
              <a class="strong" href="http://radarek.jogger.pl/kategoria/techblog/">Techblog</a>
            
            
              | <a href="http://radarek.jogger.pl/2009/03/04/biblioteka-ffi-laczymy-ruby-z-c/trackback/">trackback</a>
            
            

            
            <br />
              Tagi:
                
                  <a class="strong" href="http://technorati.com/tags/c" rel="tag">
                  c</a>
                
                  <a class="strong" href="http://technorati.com/tags/extension" rel="tag">
                  extension</a>
                
                  <a class="strong" href="http://technorati.com/tags/ffi" rel="tag">
                  ffi</a>
                
                  <a class="strong" href="http://technorati.com/tags/inline" rel="tag">
                  inline</a>
                
                  <a class="strong" href="http://technorati.com/tags/rozszerzenie" rel="tag">
                  rozszerzenie</a>
                
                  <a class="strong" href="http://technorati.com/tags/ruby" rel="tag">
                  ruby</a>
                
                  <a class="strong" href="http://technorati.com/tags/ruby/dl" rel="tag">
                  ruby/dl</a>
                
            
          </div><!-- post-header -->

          <div class="post-body">
            
<p>
Przez ostatnie dni miałem okazję zapoznać się z biblioteką <a href="http://kenai.com/projects/ruby-ffi">FFI</a>. (Swoją drogą, <a href="http://kenai.com">kenai.com</a>, czyli strona na której jest hostowany projekt, to próba stworzenia przez firmę Sun systemu, podobnego do sourceforge, githuba itp. Całość zupełnie za darmo, o pełnych możliwościach można poczytać <a href="http://kenai.com/projects/help/pages/KenaiOverview">na stronie projektu</a>. Aplikacja jest oparta o framework Ruby on Rails i uruchamiana przy pomocy <a href="http://jruby.codehaus.org/">JRubiego</a>.) Biblioteka FFI służy do łatwego łączenia kodu Rubiego z bibliotekami C.
</p>

<h3>Rozszerzenia w C - różne podejścia</h3>
<p>
Zanim opiszę zalety i sposób wykorzystania FFI, chciałbym napisać kilka zdań na temat samych rozszerzeń C dla Rubiego. Otóż istnieje kilka możliwości w tej kwestii. Jedną z podstawowych jest wykorzystanie wewnętrznego API interpretera Rubiego napisanego w C (popularnie zwanego MRI lub cRuby). Jeśli zaglądałeś kiedykolwiek w kod źródłowy MRI i widziałeś źródła np. pliku <a href="http://svn.ruby-lang.org/repos/ruby/trunk/array.c">array.c</a>, to kod takiego rozszerzenia pisze się praktycznie tak samo. Z tego też powodu jesteśmy zmuszeni do poznania, choćby w minimalnym stopniu, wewnętrznego API C Rubiego (zobacz <a href="http://www.eqqon.com/index.php/Ruby_C_Extension">http://www.eqqon.com/index.php/Ruby_C_Extension</a>).
</p>

<p>
Aby ułatwić choć trochę tworzenie takich rozszerzeń powstał projekt <a href="http://www.zenspider.com/ZSS/Products/RubyInline/Readme.html">RubyInline</a>. Jego dwoma największymi zaletami jest możliwość osadzania kodu bezpośrednio w kodzie Rubiego, a także automatyczna kompilacja takiego kodu dopiero w momencie odpalenia (skompilowane rozszerzenie jest zapisywane w katalogu ~/.ruby_inline/ by nie kompilować go za każdym uruchomieniem). Pozostałe zasady zostają takie same (ciągle operujemy na tym samym API).
</p>

~ <span class="filename">ext_ruby_inline01.rb</span>
<pre><code class="ruby">require &quot;rubygems&quot;
require &quot;inline&quot;

class MyMath
  inline do |builder|
    builder.c &quot;
      long add(int a, int b) {
        return a + b;
      }&quot;
  end
end
math = MyMath.new
puts math.add(100, 300)
</code></pre>
Wyjście:<pre><code class="shell">400
</code></pre>



<p>
Z projektów, które starają się rozwiązać podobne problemy, wymienię jeszcze <a href="http://www.swig.org/">SWIG</a> (który potrafi generować kod rozszerzenia na podstawie plików nagłówkowych .h) i <a href="http://rice.rubyforge.org/">Rice</a> (pozwala na wygodne mapowanie klas C++ na klasy Rubiego). Zainteresowanych odsyłam jednak na strony domowe.
</p>

<p>
Wszystkie wymienione biblioteki wymagają napisania łączącego kodu (tzw. glue code) w C oryginalnej biblioteki C i języka Ruby. Być może nie wszyscy wiedzą, ale wraz z Ruby dostajemy bibliotekę, która pozwala na dynamiczne wywoływanie kodu z, już zbudowanej, współdzielonej biblioteki (pliki o rozszerzeniach <code class="inline">so</code>, <code class="inline">dll</code>, <code class="inline">dynalib</code> w zależności od platformy). Jest to biblioteka Ruby/DL. Oto przykład jej wykorzystania.
</p>

~ <span class="filename">ext_ruby_dl01.rb</span>
<pre><code class="ruby">require &quot;dl/import&quot;

module Libc
  extend DL::Importable
  dlload &quot;/lib/libc.so.6&quot;

  extern &quot;int strlen(const char *)&quot;
end

puts Libc.strlen(&quot;foo&quot;)
</code></pre>
Wyjście:<pre><code class="shell">3
</code></pre>

<p>
Mam nadzieję, że jeszcze się nie niecierpliwisz, że piszę o wszystkim tylko nie o FFI. Rzecz jest jednak bardzo ważna, ponieważ chciałem zwrócić uwagę na pewną cechę, łączącą wyżej wymienione biblioteki - <strong>działają tylko z MRI (cRuby).</strong> Jeszcze do nie dawna nie było z tym problemów. Przy obecnym wysypie interpreterów Rubiego, fakt, że dana biblioteka działa tylko z jednym z nich, jest ogromną wadą. Pora zatem na przedstawienie tytułowego FFI, który jak się domyślacie, potrafi współpracować nie tylko z MRI.
</p>

<h3>FFI = Foreign Function Interface</h3>
<p>
Biblioteka ta pozwala na dynamiczne wywołanie metody z biblioteki współdzielonej, podobnie jak Ruby/DL, z tą różnicą, że na chwilę obecną dostępne są wersje działające z MRI 1.8/1.9, JRuby i Rubinius. Dodatkowo posiada bardzo ładne i wygodne API.
</p>

<p>
Oto prosty przykład użycia tej biblioteki.
</p>

~ <span class="filename">ext_ruby_ffi01.rb</span>
<pre><code class="ruby">require &quot;rubygems&quot;
require &quot;ffi&quot;

module Libc
  extend FFI::Library

  attach_function :strlen, [:string], :int
end

puts Libc.strlen(&quot;foo&quot;)
</code></pre>
Wyjście:<pre><code class="shell">3
</code></pre>

<p>
Jak już wspomniałem, FFI ma bardzo ładne API. Dotyczy to także callbacków (czyli w C wskaźniki do funkcji). Jak przystało na wersję w Rubym robimy to za pomocą bloków! Poniższy przykład wykorzystuje funkcję <code class="inline">qsort</code> ze standardowej biblioteki C, która do porównywania elementów tablicy wykorzystuje przekazany wskaźnik do funkcji.
</p>

~ <span class="filename">ext_ruby_ffi02.rb</span>
<pre><code class="ruby">require &quot;rubygems&quot;
require &quot;ffi&quot;

module Libc
  extend FFI::Library

  callback :cmp, [:pointer, :pointer], :int
  attach_function :qsort, [:pointer, :int, :int, :cmp], :void
end

ARRAY_SIZE = 5

p = MemoryPointer.new(:int, ARRAY_SIZE)
p.put_array_of_int32(0, [10, 20, 3, 9, 5])

Libc.qsort(p, ARRAY_SIZE, 4) do |p1, p2|
  p1.get_int32(0) &lt;=&gt; p2.get_int32(0)
end

puts p.get_array_of_int32(0, ARRAY_SIZE)
</code></pre>
Wyjście:<pre><code class="shell">3
5
9
10
20
</code></pre>

<p>
Mamy także możliwość bardzo łatwego mapowania struktur do klas Rubiego. Spróbujmy napisać własną bibliotekę dzieloną w C i użyć z poziomu Rubiego.
</p>

~ <span class="filename">mylib.c</span>
<pre><code class="c">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

struct user_info {
  char *name;
  int age;
};

struct user_info *user_info_create() {
  struct user_info *ui = malloc(sizeof(struct user_info));
  ui-&gt;name = NULL;
  ui-&gt;age = 0;
}

void user_info_free(struct user_info *ui) {
  if (ui-&gt;name) {
    free(ui-&gt;name);
  }
  free(ui);
}

void user_info_randomize_age(struct user_info *ui) {
  ui-&gt;age = random() % 100;
}

void user_info_print_array(struct user_info **users, int count) {
  struct user_info *ui;
  int i;

  for (i = 0; i &lt; count; i++) {
    ui = users[i];
    printf(&quot;%s ma lat %d\n&quot;, ui-&gt;name ? ui-&gt;name : &quot;(null)&quot;, ui-&gt;age);
  }
}
</code></pre>

<p>
Do skompilowania powyższego kodu (plik mylib.c) posłużyłem się poleceniem <code class="inline">gcc -O2 -fPIC -shared -Wl,-soname,libsimplemath -o mylib.so mylib.c</code>
</p>

<p>
Naszym zadaniem jest zmapowanie struktury <code class="inline">user_info</code> do klasy w Rubym. Zaprezentowany poniżej kod nie powinien sprawiać trudności, chociaż sposób operowania na klasie <code class="inline">FFI::MemoryPointer</code> może wydawać się z początku dosyć dziwny.
</p>

~ <span class="filename">ext_ruby_ffi03.rb</span>
<pre><code class="ruby">require &quot;rubygems&quot;
require &quot;ffi&quot;

module Mylib
  extend FFI::Library

  ffi_lib File.dirname(__FILE__) + &quot;/mylib.&quot; + FFI::Platform::LIBSUFFIX

  class UserInfo &lt; FFI::Struct
    layout  :name, :pointer,
            :age, :int
  end

  attach_function :user_info_create, [], :pointer
  attach_function :user_info_free, [:pointer], :void
  attach_function :user_info_randomize_age, [:pointer], :void
  attach_function :user_info_print_array, [:pointer, :int], :void
end

users = []
5.times do |i|
  p = Mylib.user_info_create()
  ui = Mylib::UserInfo.new(p)
  ui[:age] = rand(50) + 10
  ui[:name] = FFI::MemoryPointer.from_string(&quot;foo%d&quot; %i)
  users &lt;&lt; ui
end

users_ptr = FFI::MemoryPointer.new(:pointer, users.size)
users.each_with_index do |user, i|
  users_ptr[i].put_pointer(0, user)
end
Mylib.user_info_print_array(users_ptr, users.size)

ui = users.first
puts &quot;\n#{ui[:name].read_string} ma lat #{ui[:age]}&quot;
Mylib.user_info_randomize_age(ui)
puts &quot;#{ui[:name].read_string} ma teraz lat #{ui[:age]}&quot;
</code></pre>
Wyjście:<pre><code class="shell">foo0 ma lat 38
foo1 ma lat 14
foo2 ma lat 57
foo3 ma lat 52
foo4 ma lat 17

foo0 ma lat 38
foo0 ma teraz lat 83
</code></pre>

<p>
Zagadnienia związane z FFI są zbyt obszerne (choćby kwestia zwalniania pamięci) żeby opisać je tu wszystkie, zatem na tym poprzestanę. Po więcej przykładów odsyłam na wiki projektu FFI oraz dodatkowe artykuły w języku angielskim (linki podam na końcu wpisu).
</p>

<h3>Wydajność</h3>
<p>
Do pisania takich rozszerzeń może zachęcić nas także wydajność, ale nie powinniśmy tego robić pochopnie (ktoś chętny na przepisanie railsów na C?;-)). Dla świętego spokoju zrobiłem mały (i zapewne naiwny) test wydajności. Jak zwykle w takim wypadku nie bierz tego zbyt dosłownie, zawsze dokonuj własnych pomiarów.
</p>

~ <span class="filename">libfib.c</span>
<pre><code class="c">long fib(int n) {
  if (n &lt; 2) {
    return n;
  } else {
    return fib(n - 1) + fib(n - 2);
  }
}
</code></pre>
~ <span class="filename">ext_ruby_ffi04.rb</span>
<pre><code class="ruby">require &quot;rubygems&quot;
require &quot;ffi&quot;
require &quot;inline&quot;

class MylibFFI
  extend FFI::Library
  ffi_lib File.dirname(__FILE__) + &quot;/libfib.&quot; + FFI::Platform::LIBSUFFIX

  attach_function :fib, [:int], :long
end

class MylibRuby
  def self.fib(n)
    if n &lt; 2
      return n
    else
      return fib(n - 1) + fib(n - 2)
    end
  end
end

class MylibInline
  inline do |builder|
    builder.prefix %Q{
      long _fib(int n) {
        if (n &lt; 2) {
          return n;
        } else {
          return _fib(n - 1) + _fib(n - 2);
        }
      }
    }
    builder.c_raw_singleton %Q{
      VALUE fib(int argc, VALUE *args, VALUE self) {
        if (argc != 1) {
          rb_raise(rb_eArgError, &quot;1 argument expected&quot;);
        }
        VALUE n = args[0];

        return LONG2NUM(_fib(NUM2INT(n)));
      }
    }
  end
end

require &quot;benchmark&quot;

LOOP = 100000
n = 10

Benchmark.bmbm(15) do |make|
  puts &quot;n = #{n}&quot;

  make.report(&quot;pure ruby&quot;) do
    LOOP.times do
      MylibRuby.fib(n)
    end
  end

  make.report(&quot;ruby + inline&quot;) do
    LOOP.times do
      MylibInline.fib(n)
    end
  end

  make.report(&quot;ruby + FFI&quot;) do
    LOOP.times do
      MylibFFI.fib(n)
    end
  end
end
</code></pre>

Wyjście:
<pre><code class="shell">                     user     system      total        real
pure ruby       17.200000   5.690000  22.890000 ( 23.281636)
ruby + inline    0.130000   0.020000   0.150000 (  0.147392)
ruby + FFI       0.150000   0.010000   0.160000 (  0.171384)
</code></pre>

<p>
Jak widać nie powinno być dużej różnicy między klasycznym rozszerzeniem a takim napisanym przy pomocy FFI. Różnica ta jeszcze bardziej będzie się zacierać im więcej czasu upłynie bezpośrednio na poziomie kodu C.
</p>

<h3>Dla kogo FFI?</h3>
<p>
Chyba nie trzeba przekonywać nikogo o korzyściach płynących z wykorzystania tej biblioteki, zamiast jednego z wymienionych na początku wpisu sposobów. Brak dodatkowej kompilacji, krótszy kod (który najczęściej w rozszerzeniach polegał na przekształcaniu typów między C a Ruby), przenośność między różnymi interpreterami Rubiego, niezależność od wewnętrznego API interpretera (ile rozszerzeń w C działały bez zmian w ruby 1.9?) to jego główne atuty. Jeśli kiedykolwiek przyjdzie Ci napisać takie rozszerzenie to w pierwszej kolejności wypróbuj FFI.
</p>

<p>
Linki.
</p>

<ul>
  <li><a href="http://kenai.com/projects/ruby-ffi/">Strona projektu FFI</a> (polecam przejrzeć źródła, w szczególności "speki")</li>
  <li><a href="http://kenai.com/projects/ruby-ffi/pages/Home">Przykłady na wiki FFI</a></li>
  <li><a href="http://www.igvita.com/2009/01/15/bridging-mri-jruby-rubinius-with-ffi/">Bridging MRI, JRuby &amp; Rubinius with FFI</a></li>
  <li><a href="http://blog.headius.com/2008/10/ffi-for-ruby-now-available.html">FFI for Ruby Now Available</a></li>
  <li><a href="http://blog.segment7.net/articles/2008/01/15/rubinius-foreign-function-interface">Rubinius' Foreign Function Interface</a></li>
  <li><a href="http://lifegoo.pluskid.org/?p=370">On the Rubinius FFI</a> - bardzo obszerny artykuł, polecam!</li>
  <li><a href="http://www.infoq.com/news/2008/12/ruby-ffi-on-mri-jruby">Ruby FFI Brings Native Library Access to JRuby, MRI</a></li>
</ul>
          </div><!-- post-body -->
        </div><!-- post -->
        <div class="separator"></div>
        
        <div class="wykop" style="padding: 1px;" >
          <p style="margin-top: 10px;">
          Jeśli spodobał Ci się wpis to może umieścisz ten blog w swoim czytniku RSS?
          </p>
        </div>
        <div style="clear: left;"></div>

        

        
        <h3>Komentarze</h3>
        

        <div id="comments">
        
          <div id="comment-1350103" class="comment1 jogger">
            
            1.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://uzytkownik-test.jogger.pl">Uzytkownik</a></strong> napisał(a) 04 Mar 2009 o godz. 09:12:
            <div class="top"></div>
            <div class="content">
              <p>Jedna uwaga. Jeśli mamy jakoś stałą która jest gwarantowana przez <span class="caps">POSIX</span> że istnieje ale nie wiemy ile ona wynosi to chyba nadal pozostaje nam <span class="caps">PORI</span> (Plain Old Ruby-Inline).</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350158" class="comment2 jogger">
            
            2.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://tomash.jogger.pl">Tomash</a></strong> napisał(a) 04 Mar 2009 o godz. 11:46:
            <div class="top"></div>
            <div class="content">
              <p>Zacytuję fragment własnego bloga</p>

<blockquote>
<p>the “official” Matz Ruby Interpreter (<span class="caps">MRI</span>) is here to stay and going to remain the mainstream Ruby interpreter. Despite its technical flaws, despite JRuby gaining popularity in some very specific applications (Mike Lee used it pretty creatively with GreaseSpoon in his “Test By Proxy” method) and with Rubinius development practically stalled because of recent EngineYard layoffs.</p>
</blockquote>

<p>(<a href="http://tomash.wrug.eu/2009/03/03/rudy-ruby-native-extensions-in-d-programming-language.html" rel="nofollow" >tomash.wrug.eu</a>)</p>

<p>Także nie, nie uważam żeby celowanie w zgodność z JRuby czy Rubiniusem było naprawdę tego warte. Zwłaszcza że rozchodzi się głównie o pisanie interfejsu, middlemana pomiędzy Rubym a już istniejącą i działającą biblioteką C.</p>

<p>Radarek, czekam na Twoją recenzję D i perspektywę pisania z użyciem RuDy ;)</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350218" class="comment1 guest">
            
            3.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong>Paweł Kondzior</strong> napisał(a) 04 Mar 2009 o godz. 14:10:
            <div class="top"></div>
            <div class="content">
              <p>Poza technicznymi brukowcami warto jeszcze śledzić bezpośrednie źródła, czyli np blogi developerów Rubiniusa ;) Ja nie śledziłem rok, miałem podobne zdanie co do Rubiniusa jak w załączonym cytacie, po oczytaniu, zmieniłem zdanie ;) Poczytaj co dzieje sie w Rubiniusie.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350229" class="comment2 jogger">
            
            4.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://tomash.jogger.pl">Tomash</a></strong> napisał(a) 04 Mar 2009 o godz. 14:25:
            <div class="top"></div>
            <div class="content">
              <p>Rubinius zaczął jakoś równo z JRuby, a wciąż nie odpala Railsów. Poza korzyściami &#8222;formalnymi&#8221; z jego powstawania (specyfikacja języka itp.) nie widzę żadnych powalających zalet tego projektu (JRuby chociaż ma wydajność i integrację z javowymi bibliotekami). Także osobiście wolałbym, żeby ta ekipa (Ezra, Yehuda itd.) skupiła się na Merbie niż na implementacji rubiego nieniosącej ze sobą konkretniejszych korzyści.</p>

<p>InfoQ i Techcruncha nie czytam, więc wypraszam sobie fragment o technicznych brukowcach ;)</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350240" class="comment1 guest">
            
            5.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong>Paweł Kondzior</strong> napisał(a) 04 Mar 2009 o godz. 14:40:
            <div class="top"></div>
            <div class="content">
              <p>No, przedewszystkim nie istnieje coś takiego jak JRails ;-) albo RRails :P (Rubinius Rails), Rails nie stanowi mainstreamu świata ruby. To Rails jest pisane w Ruby a nie odwrotnie. Więc to że obecnie Rubinius nie odpala Rails oznacza tylko tyle że Rubinius nie stanowi alternatywy dla <span class="caps">MRI</span> dziś. </p>

<p>Natomiast jeśli chodzi o ocenianie tego co Ezra i Yehuda planuje w stosunku do Rails, to tutaj też uważam że bardzo się mylisz w ocenie tego. W dużym uproszczeniu rails i merb to frameworki <span class="caps">MVC</span>, tylko że Merb skupia uwage głównie na ostatniej literze tego skrótu. Rails to cały pakiet out of box, rozwijany przez ponad 6 lat? Stanowi znacznie dojrzalsze i bogatsze rozwiązanie od Merba, uznali że szybciej będzie zaimplementować teraz w Rails lepiej wszystko to co osiągneli w Merbie, niż przez najbliższe 2-3 lata próbować nadgonić Rails mając znikome środki ludzkie na to. Pamietaj że to wszystko jest napędzane przez siłe programistów commitujących do projektu, a nie będących core tego projektu. To tyle. rozpisuje sie już zabardzo.</p>

<p>Chodziło mi bardziej o to że powołujesz sie tylko na jeden z faktów pomijasz aktualny stan rubiniusa i to jakie możliwości ma ten projekt.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350267" class="comment2 jogger">
            
            6.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://tomash.jogger.pl">Tomash</a></strong> napisał(a) 04 Mar 2009 o godz. 15:39:
            <div class="top"></div>
            <div class="content">
              <p>Nie neguję możliwości i potencjału Rubiniusa. Tylko wiesz, to jak ze Stingiem: od dwudziestu lat się świetnie zapowiada, a póki co robi po prostu słabą muzykę ;) </p>

<p>I o ile widziałem realną potrzebę powstania JRuby i stojące za nim przesłanki, o tyle realnej potrzeby powstania/rozwijania Rubiniusa nie widzę.</p>

<p>Railsy są &#8222;tylko jedną z aplikacji&#8221; w Ruby, ale z racji swojej popularności (większość pracy dla rubiowców to praca w rails) i maksymalnego wyżyłowania możliwości rubiego, są praktycznie &#8222;ultimate&#8221; celem każdej implementacji rubiego.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350394" class="comment1 owner">
            
            7.
            
            <img class="avatar-icon" src="http://radarek.jogger.pl/files/favicon.png" alt="avatar icon" />
            
            
            <strong><a href="http://radarek.jogger.pl">Radarek</a></strong> napisał(a) 04 Mar 2009 o godz. 19:15:
            <div class="top"></div>
            <div class="content">
              <p><strong>Tomash</strong>, mam wrażenie, że patrzysz z bardzo wąskiej perspektywy. <span class="caps">MRI</span> jest i będzie, przynajmniej przez najbliższe kilka lat, wiodącą implementacją Rubiego. I to jest normalne, zawsze jedna z implementacji będzie zgarniać ~90% &#8222;rynku&#8221;. Każda z implementacji ma swój konkretny cel, ale nie wydaje mi się, żeby jakakolwiek miała na celu zastąpienie <span class="caps">MRI</span>. Nawet Evan Phoenix zapytany czy Rubinius w przyszłości zastąpi <span class="caps">MRI</span>, odpowiedział że nie wie, ale na pewno nie taki jest jego cel.</p>

<p>Jakikolwiek rozkład popularności by nie był, to każda z tych implementacji będzie posiadać miejsca, w których będzie używana i w których żadna inna nie będzie mogła zostać użyta. Np. firma X przez lata wypracowała sposób odpalania aplikacje na jvm i nie chce poza to środowisko wyjść.</p>

<p>Chyba nie trzeba tłumaczyć jak wielkie korzyści mogą płynąć z tego, że ruby może być odpalany na jvm lub .net? Zwiększa się ekosystem, community itp.</p>

<p>Rubinius z kolei to próba stworzenia VM Rubiego, który będzie posiadać jak najmniej natywnego kodu w C/C++, a jak najwięcej w Ruby. Do tego dołóżmy fakt, że implementacja była tworzona od podstaw, a więc Evan mógł uczyć się na błędach Matza i spółki. Czego dowodem może być łatwość zmian, których już dokonywał nie raz. Dlaczego GC Rubiego nie jest zmieniane od tylu lat? Bo nie są w stanie tego zrobić (bo np. wszystkie extensiony przestałyby działać itp).</p>

<blockquote>
<p>Także osobiście wolałbym, żeby ta ekipa (Ezra, Yehuda itd.) skupiła się na Merbie niż na implementacji rubiego nieniosącej ze sobą konkretniejszych korzyści.</p>
</blockquote>

<blockquote>
<p>I o ile widziałem realną potrzebę powstania JRuby i stojące za nim przesłanki, o tyle realnej potrzeby powstania/rozwijania Rubiniusa nie widzę.</p>
</blockquote>

<p>Bo patrzysz na teraźniejszość, a nie na przyszłość. Nawet Koichi <span class="caps">SASADA</span> (twórca <span class="caps">YARV</span>) wyraził opinię w swojej prezentacji na rubyconf 2008, że Rubinius jest projektem dającym największą nadzieję na dobrą przyszłość Rubiego. Po pierwsze Rubinius jest <strong>jedyną</strong> implementacją pisaną od podstaw. Każda inna bazuje już na gotowym VM, więc nie musi się np. męczyć z implementacją GC, wielowątkowością itp. Trzeba też zdawać sobie sprawę, że taki VM nie powstaje w rok, dwa. To nie jest ot taki sobie projekcik. Dlatego nie wymagaj, żeby już teraz Rubinius był gotowy na produkcyjne środowisko. Pewnie i za rok nie będzie.</p>

<p>Odnośnie jeszcze <span class="caps">FFI</span>.</p>

<blockquote>
<p>Także nie, nie uważam żeby celowanie w zgodność z JRuby czy Rubiniusem było naprawdę tego warte. Zwłaszcza że rozchodzi się głównie o pisanie interfejsu, middlemana pomiędzy Rubym a już istniejącą i działającą biblioteką C.</p>
</blockquote>

<p>No i właśnie odpowiedziałeś na pytanie dlaczego (odrzucając nawet argument zgodności <span class="caps">FFI</span> z innymi interpreterami) warto używać <span class="caps">FFI</span>. W większości chodzi o glue code. Nie wiem jak Ty, ale ja wolę napisać:</p>

<pre><code class="ruby">class Fib
  attach_function :fib, [:int], :long
end
</code></pre>

<p>niż</p>

<pre><code class="c">VALUE rb_fib(VALUE self, VALUE n) {
  return LONG2NUM(fib(NUM2INT(n)));
}
VALUE fib_class;
void Init_fib() {
  fib_class = rb_define_class("Fib");
  rb_define_module_function(fib_class, "fib", rb_fib, 1);
}
</code></pre>

<p>I do tego jeszcze kompilacja.</p>

<p>A to i tak najprostszy przypadek. <span class="caps">FFI</span> zostało przyjęte bardzo dobrze przez programistów i dziwię się Twojemu podejściu&#8230;</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350407" class="comment2 owner">
            
            8.
            
            <img class="avatar-icon" src="http://radarek.jogger.pl/files/favicon.png" alt="avatar icon" />
            
            
            <strong><a href="http://radarek.jogger.pl">Radarek</a></strong> napisał(a) 04 Mar 2009 o godz. 19:22:
            <div class="top"></div>
            <div class="content">
              <p>Nie napisałem o najważniejszym.</p>

<p>Wspomniałem o różnych implementacjach, wspomniałem o tym, że każda z nich ma swoje miejsce.<br />
Sęk w tym, żeby te różne implementacji nie podzieliły środowiska Rubiego, bo w końcu język jest ciągle ten sam. Chodzi o to, żeby nie było takich sytuacji, że autor danej biblioteki musiał napisać w <span class="caps">README</span> &#8222;ta biblioteka działa tylko z implementacją X&#8221;, bo to tylko wprowadza podział. Podział, którego trzeba unikać. I <span class="caps">FFI</span> pięknie się w tą ideę wpasowuje. Czy takie argumenty przemawiają do Ciebie Tomashu?:)</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350426" class="comment1 guest">
            
            9.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong>Paweł Kondzior</strong> napisał(a) 04 Mar 2009 o godz. 19:54:
            <div class="top"></div>
            <div class="content">
              <p>Było by fajnie jakbyś gdzięś udostępnił na stornie małą podpowiedź do tego jak formatować wpisy :) Bo za każdym razem jak próbuje :P to mi nie wychodzi.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350669" class="comment2 jogger">
            
            10.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://tomash.jogger.pl">Tomash</a></strong> napisał(a) 05 Mar 2009 o godz. 10:27:
            <div class="top"></div>
            <div class="content">
              <p>@Radarek: dobra, przekonałeś mnie :) W takim razie szkoda, że EngineYard musiało zwolnić pracujących nad Rubiniusem programistów.</p>

<p>@Paweł: pod okienkiem komentarza masz link do składni Textile, z której możesz korzystać.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350700" class="comment1 jogger">
            
            11.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://tomash.jogger.pl">Tomash</a></strong> napisał(a) 05 Mar 2009 o godz. 11:38:
            <div class="top"></div>
            <div class="content">
              <p>Chociaż nie ukrywam, że wolałbym jak w Pythonie: góra dwa interpretery (domyślny w C oraz Jython), więc pisząc rozszerzenie nie trzeba korzystać z jakichś kosmicznych obejść typu <span class="caps">FFI</span> (zupełnie mnie nie przekonuje kod, który pokazałeś), tylko można napisać rozszerzenie w dwóch językach (C i Java) i cacy.</p>

<p>Tak zresztą są napisane np. hpricot i mongrel i chciałbym, żeby wciąż tak było. Rubinius przecież może (co myślę że nastąpi i jest tylko kwestią czasu) udostępniać <span class="caps">API</span> w 100% zgodne z <span class="caps">API</span> <span class="caps">MRI</span> :)</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350702" class="comment2 jogger">
            
            12.
            
            <img class="avatar-icon" src="http://blog-pl.piechotka.com.pl/files/favicon.png" alt="avatar icon" />
            
            
            <strong><a href="http://blog-pl.piechotka.com.pl">Uzytkownik</a></strong> napisał(a) 05 Mar 2009 o godz. 11:41:
            <div class="top"></div>
            <div class="content">
              <p>@Tomash: Przeczytaj &#8211; <span class="caps">API</span> <span class="caps">MRI</span> utrudnia pracę nad GC. A <span class="caps">FFI</span> nie jest &#8216;kosmiczne&#8217; tylko jest dosyć wygodne. &#8216;Bezpośrednio&#8217; wywołujesz funkcję C bez konieczności pisania wrappera do niej. Dzięki temu nie używamy 3 języków (C, Java i Ruby) tylko jednego. Przenośność to dodatkowy bonus.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1350711" class="comment1 jogger">
            
            13.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://tomash.jogger.pl">Tomash</a></strong> napisał(a) 05 Mar 2009 o godz. 12:08:
            <div class="top"></div>
            <div class="content">
              <p>Nie tyle <span class="caps">API</span> <span class="caps">MRI</span>, co jego implementacja w <span class="caps">MRI</span> &#8212; taka subtelna różnica, ale tak naprawdę te udostępniane funkcje są całkiem sensownym zestawem (chodzi mi o nazwy i parametry &#8211; Python ma podobne <span class="caps">API</span>), po prostu pytanie jak bardzo &#8222;na surowo&#8221; są wywoływane przez interpreter (bez opakowywania itd.).</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1353421" class="comment2 guest">
            
            14.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong>rendered some</strong> napisał(a) 10 Mar 2009 o godz. 20:21:
            <div class="top"></div>
            <div class="content">
              <p>te wyniki na wyjściu są na ruby 1.8?<br />
jeżeli tak to są g &#8230; warte w kontekście ruby 1.9 !!!</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1353505" class="comment1 owner">
            
            15.
            
            <img class="avatar-icon" src="http://radarek.jogger.pl/files/favicon.png" alt="avatar icon" />
            
            
            <strong><a href="http://radarek.jogger.pl">Radarek</a></strong> napisał(a) 10 Mar 2009 o godz. 21:54:
            <div class="top"></div>
            <div class="content">
              <p>W teście nie chodziło o dokładne porównanie prędkości, raczej o pokazanie o ile rzędów kod w C będzie szybszy. Ruby1.9 nie zmienia w tej sytuacji aż tak bardzo.</p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1363378" class="comment2 guest">
            
            16.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong>Kaśka89</strong> napisał(a) 28 Mar 2009 o godz. 00:40:
            <div class="top"></div>
            <div class="content">
              <p>Cześć. Od jakiegoś czasu przeglądam twojego bloga i chyba wybiorę ten język. Niestety dzisiaj trafiłam na taki komentarz i już sama nie wiem czego użyć to tworzenia dynamicznych stron www:(<br />
<code> "ja mam same nieprzyjemne wspomnienia w kwestii ruby &#60;.&#60; wiecej zabawy niz z takim pythonem, skladnia tez jakos nie powala. Ogolnie ruby to takie cos dla masochistow a to cale zachwalane gem ostatnio mi sie wywalilo i musialem na google szukac sposobow zeby to naprawic oO w pythonie przynajmniej nic samo z siebie sie nie wywala &#60;.&#60;" </code></p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1368037" class="comment1 guest">
            
            17.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://wijet.pl" rel="nofollow">wijet</a></strong> napisał(a) 05 Kwi 2009 o godz. 17:16:
            <div class="top"></div>
            <div class="content">
              <p>Hey, kolejny swietny artykul, faktycznie uzywanie ffi jest duzo latwiejsze niz pisanie rozszerzen w C.</p>

<p>Dla zainteresowanych polecam ta prezentacje o <span class="caps">FFI</span> <br />
<a href="http://mwrc2009.confreaks.com/13-mar-2009-16-10-ffi-jeremy-hinegardner.html" rel="nofollow" >Mountain West Ruby Conference 2009 &#8211; <span class="caps">FFI</span> &#8211; Jeremy Hinegardner</a></p>
            </div>
            <div class="footer"></div>
          </div>
        
          <div id="comment-1404980" class="comment2 guest">
            
            18.
            
            
            <img class="avatar-icon" src="/files/default-avatar-icon.png" alt="avatar icon" />
            
            <strong><a href="http://rosetta.null-zero.com" rel="nofollow">Siegfried</a></strong> napisał(a) 20 Cze 2009 o godz. 01:03:
            <div class="top"></div>
            <div class="content">
              <p>bardzo dobry artykul, musze sie przyjrzec tej bibliotece</p>
            </div>
            <div class="footer"></div>
          </div>
        
        </div><!-- comments -->

        

        

        

        
        <h3>Musisz się zalogować, jeśli chcesz dodać komentarz.</h3>
        
      </div><!-- content -->

      <div class="cleaner"></div>

    </div><!-- content-wrapper -->

    <div id="footer" style="clear: both;">
    <div id="footer-shadow"></div>
        <h3>Czytelnicy</h3>
        <script type="text/javascript" src="http://pub.mybloglog.com/comm2.php?mblID=2007050116063791&amp;c_width=800&amp;c_sn_opt=n&amp;c_rows=3&amp;c_img_size=f&amp;c_heading_text=&amp;c_color_heading_bg=FFFFFF&amp;c_color_heading=000000&amp;c_color_link_bg=FFFFFF&amp;c_color_link=000000&amp;c_color_bottom_bg=FFFFFF"></script>
      <div id="bottom-para">
        <p>
          &copy; 2007-2010, Radarek bloguje. Graphics, css, xhtml, javascript code by <a href="/">Radarek</a>
          | <a href="http://validator.w3.org/check/referer">Valid XHTML 1.0 Strict</a>
          | <a href="http://jigsaw.w3.org/css-validator/check/referer">Valid CSS</a>
        </p>
      </div>
    </div><!-- footer -->

    <div id="jruby-irb-console" style="display: none;">
      <div class="overlay">
        <div class="window">
          <div class="inner">
            <a class="close-popup" href="#">Zamknij</a>
            <div class="irb-console-applet">
            </div>
          </div>
        </div>
      </div>
    </div>
    <!--</div>-->
  </body>
</html>